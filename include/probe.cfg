#####################################################################
#  Probe
#####################################################################
[probe]
##  Inductive Probe
##  This probe is not used for Z height, only Quad Gantry Leveling
pin: PG15
x_offset: 0
y_offset: 25.0
z_offset: 0
speed: 50.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.005
samples_tolerance_retries: 10

#####################################################################
#  Disable Heater while probing
#####################################################################
#[homing_heaters]
# The Voron should not require the disabling of any heaters during homing
#steppers: stepper_z, stepper_z1, stepper_z2, stepper_z3
#heaters: extruder

#####################################################################
#  Gantry Adjustment Routines
#####################################################################
[quad_gantry_level]
##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
gantry_corners:
   -60,-10
   410,420
#  Probe points
points:
   50,25
   50,275
   300,275
   300,25
speed: 300
horizontal_move_z: 10
#horizontal_move_z: 20
retries: 5
#retries: 10
retry_tolerance: 0.0075
#retry_tolerance: 0.005
max_adjust: 10
#max_adjust: 15

#####################################################################
#  Macros
#####################################################################
[gcode_macro QUAD_GANTRY_LEVEL]
description: Conform a moving, twistable gantry to the shape of a stationary bed
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  {% set move_z = [user.z_hop, printer.toolhead.position.z]|max %} ; calc movement high
  _SET_Z_CURRENT VAL=HOME
  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}
  {% if user.hw.mag_probe.ena %}
    G90
    G0 Z{move_z} F{user.speed.z_hop} ; move head up to insure Probe is not triggered in error case
    ATTACH_PROBE 
  {% endif %}
  QUAD_GANTRY_LEVEL_BASE {rawparams}
  {% if user.hw.mag_probe.ena %} DETACH_PROBE {% endif %}
   {% if params.HOME|default('true')|lower == 'true' %} G28 Z {% endif %}
  _SET_Z_CURRENT
  {% if params.PARK|default('true')|lower == 'true' %}
    G90
    G0 X{user.park.bed.x} Y{user.park.bed.y} Z{user.park.bed.z} F{user.speed.travel}
  {% endif %}
  {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative

[gcode_macro CHECK_QGL]
description: Run after QUAD_GANTRY_LEVEL to insure it passes
gcode:
  {% set user        = printer['gcode_macro _USER_VARIABLE'] %}
  {% set probe_state = printer['gcode_macro _MAG_PROBE'].state|default('unknown')|lower %} ; get probe state
  {% set probe_ok    = False if user.hw.mag_probe.ena and (probe_state == 'error' or probe_state == 'unknown')
                  else True %}  
  {% if not printer.quad_gantry_level.applied or not probe_ok %} ; check QGL and probe status
    {action_respond_info("QGL CHECK: Fail therefore cancel the print")}
    PAUSE_BASE
    G90
    G0 Z{user.z_hop} F{user.speed.z_hop}                                 ; move nozzle to z high first
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative
    {% if user.hw.mag_probe.ena %} DETACH_PROBE {% endif %}
    CANCEL_PRINT PARK=1 ERROR=1
  {% else %}
    {action_respond_info("QGL CHECK: Pass")}
  {% endif %}
