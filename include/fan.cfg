#####################################################################
#  Fan Control
#####################################################################

##  Part Cooling Fan
[fan]
pin: PA8
#   Output pin controlling the fan. This parameter must be provided.
max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
shutdown_speed: 0.0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
kick_start_time: 0.5
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan
#   spinning). The default is 0.100 seconds.
off_below: 0.10
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.
#tachometer_pin:
#   Tachometer input pin for monitoring fan speed. A pullup is generally
#   required. This parameter is optional.
#tachometer_ppr: 2
#   When tachometer_pin is specified, this is the number of pulses per
#   revolution of the tachometer signal. For a BLDC fan this is
#   normally half the number of poles. The default is 2.
#tachometer_poll_interval: 0.0015
#   When tachometer_pin is specified, this is the polling period of the
#   tachometer pin, in seconds. The default is 0.0015, which is fast
#   enough for fans below 10000 RPM at 2 PPR. This must be smaller than
#   30/(tachometer_ppr*rpm), with some margin, where rpm is the
#   maximum speed (in RPM) of tshutdown_speed: 0

##  Hotend Fan - Turns on when the hotend exceeds 50 degrees
[heater_fan hotend_fan]
pin: PE5
max_power: 1.0
shutdown_speed: 0.0
cycle_time: 0.010
hardware_pwm: False
kick_start_time: 0.5
off_below: 0.10
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

##  Raspberry Pi Fan - enabled when the temp of the Raspberry PI exceeds the target temp
[temperature_fan raspberry_pi]
pin: PD12
max_power: 1.0
cycle_time = 0.010
hardware_pwm = False
kick_start_time = 1.5
sensor_type = temperature_host
min_temp = 0
max_temp = 65
target_temp = 45
max_speed = 1.0
min_speed = 0.1
shutdown_speed: 0.0
control = pid
pid_kp = 10.0
pid_ki = 1.0
pid_kd = 1.0
pid_deriv_time = 2.0

##  Raspberry Pi Fan - enabled when the temp of the Raspberry PI exceeds the target temp
#[temperature_fan BTT_Octopus]
#pin: PD12
#max_power: 1.0
#cycle_time = 0.010
#hardware_pwm = False
#kick_start_time = 0.5
#sensor_type = temperature_mcu
#min_temp = 0
#max_temp = 57
#target_temp = 37
#max_speed = 0.5
#min_speed = 0.0
#shutdown_speed: 0.0
#control = pid
#pid_kp = 10.0
#pid_ki = 1.0
#pid_kd = 1.0
#pid_deriv_time = 2.0

##  Cabinet Exhaust Fan - Manual control via UI
[fan_generic exhaust_fan]
pin: PD13
max_power: 1.0
shutdown_speed: 0.0
cycle_time: 0.010
hardware_pwm: False
kick_start_time: 0.5
off_below: 0.10
